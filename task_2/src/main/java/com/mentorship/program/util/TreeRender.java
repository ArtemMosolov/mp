package com.mentorship.program.util;

import java.util.Iterator;
import java.util.LinkedList;
import java.util.List;

import com.mentorship.program.data.Node;

public class TreeRender {
	
	public static <T> void renderDirectoryTree(Node<T> tree) {
        List<StringBuilder> lines = renderDirectoryTreeLines(tree);
        String newline = System.getProperty("line.separator");
        StringBuilder sb = new StringBuilder(lines.size() * 20);
        for (StringBuilder line : lines) {
            sb.append(line);
            sb.append(newline);
        }
        System.out.println(sb);
    }
    
    private static <T> List<StringBuilder> renderDirectoryTreeLines(Node<T> tree) {
        List<StringBuilder> result = new LinkedList<>();
        result.add(new StringBuilder().append(tree.getData().toString()));
        List<Node<T>> list = new LinkedList<>(tree.getChildren());
        for(Node<T> node : list){//tree.getChildren()) {
        	List<StringBuilder> subtree = renderDirectoryTreeLines(node);
        	if(node.getChildren() != null) {
        		addSubtree(result, subtree);
        	} else {
        		addLastSubtree(result, subtree);
        	}
        }
        return result;
    }
    
    private static void addSubtree(List<StringBuilder> result, List<StringBuilder> subtree) {
        Iterator<StringBuilder> iterator = subtree.iterator();
        //subtree generated by renderDirectoryTreeLines has at least one line which is tree.getData()
        result.add(iterator.next().insert(0, "├── "));
        while (iterator.hasNext()) {
            result.add(iterator.next().insert(0, "│   "));
        }
    }
    
    private static void addLastSubtree(List<StringBuilder> result, List<StringBuilder> subtree) {
        Iterator<StringBuilder> iterator = subtree.iterator();
        //subtree generated by renderDirectoryTreeLines has at least one line which is tree.getData()
        result.add(iterator.next().insert(0, "└── "));
        while (iterator.hasNext()) {
            result.add(iterator.next().insert(0, "    "));
        }
    }
	
}
