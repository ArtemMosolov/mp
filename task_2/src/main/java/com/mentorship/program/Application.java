package com.mentorship.program;

import com.mentorship.program.cli.CLIParser;
import com.mentorship.program.cli.validation.CommandLineValidator;
import com.mentorship.program.data.Node;
import com.mentorship.program.factory.file.Searchable;
import com.mentorship.program.factory.file.factory.SearchFileFactory;
import com.mentorship.program.factory.threads.ThreadSeeker;
import com.mentorship.program.factory.threads.factory.ThreadBuildFactory;

import java.io.File;
import java.util.Iterator;
import java.util.LinkedList;
import java.util.List;

class Application {

    public void run(final String[] args) {

        CLIParser cli = new CLIParser(args);
        CommandLineValidator.validate(cli);

        // -a1 /projects/MP/task_2/test_dir -a2 test_file.txt -a3 byName -a4 singleThread
        // -a1 /projects/MP/task_2/test_dir -a2 test_file.txt -a3 byName -a4 workStealing

        File fileLocation = new File(cli.getArgument("a1"));
        String searchValue = cli.getArgument("a2");
        Searchable searchable = SearchFileFactory.getSearchCriteria(cli.getArgument("a3"));
        ThreadSeeker threadable = ThreadBuildFactory.getThreadAlgorithm(cli.getArgument("a4"));

        Node<String> folderTree = new Node<>(fileLocation.getName());

        FileSeeker fileSeeker = new FileSeeker(fileLocation, searchValue, searchable, threadable, folderTree);
        fileSeeker.findFile();

        try {
            Thread.sleep(1000);
        } catch (InterruptedException e) {
            e.printStackTrace();
        }

        //printTree(folderTree, " ");
        System.out.println(renderDirectoryTree(folderTree));
    }

    public static <T> String renderDirectoryTree(Node<T> tree) {
        List<StringBuilder> lines = renderDirectoryTreeLines(tree);
        String newline = System.getProperty("line.separator");
        StringBuilder sb = new StringBuilder(lines.size() * 20);
        for (StringBuilder line : lines) {
            sb.append(line);
            sb.append(newline);
        }
        return sb.toString();
    }
    
    public static <T> List<StringBuilder> renderDirectoryTreeLines(Node<T> tree) {
        List<StringBuilder> result = new LinkedList<>();
        result.add(new StringBuilder().append(tree.getData().toString()));
        for(Node<T> node : tree.getChildren()) {
        	List<StringBuilder> subtree = renderDirectoryTreeLines(node);
        	if(node.getChildren() != null) {
        		addSubtree(result, subtree);
        	} else {
        		addLastSubtree(result, subtree);
        	}
        }
        return result;
    }
    
    private static void addSubtree(List<StringBuilder> result, List<StringBuilder> subtree) {
        Iterator<StringBuilder> iterator = subtree.iterator();
        //subtree generated by renderDirectoryTreeLines has at least one line which is tree.getData()
        result.add(iterator.next().insert(0, "├── "));
        while (iterator.hasNext()) {
            result.add(iterator.next().insert(0, "│   "));
        }
    }
    
    private static void addLastSubtree(List<StringBuilder> result, List<StringBuilder> subtree) {
        Iterator<StringBuilder> iterator = subtree.iterator();
        //subtree generated by renderDirectoryTreeLines has at least one line which is tree.getData()
        result.add(iterator.next().insert(0, "└── "));
        while (iterator.hasNext()) {
            result.add(iterator.next().insert(0, "    "));
        }
    }

}
